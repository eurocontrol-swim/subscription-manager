# Copyright 2019 EUROCONTROL
# ==========================================
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
# following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#    disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ==========================================
#
# Editorial note: this license is an instance of the BSD license template as provided by the Open Source Initiative:
# http://opensource.org/licenses/BSD-3-Clause
#
# Details on EUROCONTROL: http://www.eurocontrol.int

openapi: 3.0.0

servers:
  - description: SWIM Subscription Manager
    url: /subscription-manager/api/1.0
info:
  description: SWIM Subscription Manager
  version: "1.0.0"
  title: SWIM Subscription Manager API
#  contact:
#    email: you@your-company.com
#  license:
#    name: Apache 2.0
#    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
security:
  - basicAuth: []
tags:
  - name: topics
    description: Operations related to topics a service can subscribe to
  - name: subscriptions
    description: Operations related to (un)subscribing to a topic
  - name: users
    description: Operations related users' creation and retrieval
  - name: ping
    description: Checking operations like checking the credentials of a user

paths:
  /ping-credentials:
    get:
      tags:
        - ping
      summary: checks the credentials of the user who sends this request
      operationId: subscription_manager.endpoints.ping.ping_credentials
      responses:
        '200':
          description: the user is authenticated
        '401':
          description: the user is not authenticated
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /topics/own:
    get:
      tags:
        - topics
      summary: retrieves all available topics of the logged in user
      operationId: subscription_manager.endpoints.topics.get_topics_own
      responses:
        '200':
          description: lists all available topics of the logged in user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /topics/:
    get:
      tags:
        - topics
      summary: retrieves all available topics
      operationId: subscription_manager.endpoints.topics.get_topics
      responses:
        '200':
          description: lists all available topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - topics
      summary: creates a new topic
      operationId: subscription_manager.endpoints.topics.post_topic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicPost'
        description: topic data to add
      responses:
        '201':
          description: topic created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /topics/{topic_id}:
    get:
      tags:
        - topics
      summary: retrieves a topic by its id
      operationId: subscription_manager.endpoints.topics.get_topic
      parameters:
        - in: path
          name: topic_id
          description: the id of the requested topic
          schema:
            type: integer
      responses:
        '200':
          description: the requested topic
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '404':
          description:  topic does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - topics
      summary: deletes a topic by its id
      operationId: subscription_manager.endpoints.topics.delete_topic
      parameters:
        - in: path
          name: topic_id
          description: the id of the requested topic
          schema:
            type: integer
      responses:
        '204':
          description: topic deleted successfully
        '404':
          description:  topic does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#    put:
#      tags:
#        - topics
#      summary: updates an existing topic
#      operationId: subscription_manager.endpoints.topics.put_topic
#      parameters:
#        - in: path
#          name: topic_id
#          description: the id of the topic to be updated
#          schema:
#            type: integer
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/TopicPut'
#      responses:
#        '200':
#          description: the requested topic
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Topic'
#        '404':
#          description:  topic does not exist
#        '400':
#          description: 'invalid input, object invalid'
#        '409':
#          description: an existing item already exists or a general DB conflict
#        default:
#          description: unexpected error
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Error'

  /subscriptions/:
    get:
      tags:
        - subscriptions
      summary: retrieves all available subscriptions
      operationId: subscription_manager.endpoints.subscriptions.get_subscriptions
      parameters:
        - in: query
          name: queue
          description: filters the subscriptions by the given queue name
          schema:
            type: string
      responses:
        '200':
          description: lists all available subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - subscriptions
      summary: creates a new subscription
      operationId: subscription_manager.endpoints.subscriptions.post_subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPost'
        description: subscription data to add
      responses:
        '201':
          description: subscription created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subscriptions/{subscription_id}:
    get:
      tags:
        - subscriptions
      summary: retrieves a subscription by its id
      operationId: subscription_manager.endpoints.subscriptions.get_subscription
      parameters:
        - in: path
          name: subscription_id
          description: the id of the requested subscription
          schema:
            type: integer
      responses:
        '200':
          description: the requested subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          description:  subscription does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - subscriptions
      summary: updates an existing subscription
      operationId: subscription_manager.endpoints.subscriptions.put_subscription
      parameters:
        - in: path
          name: subscription_id
          description: the id of the subscription to be updated
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionPut'
      responses:
        '200':
          description: the requested subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '404':
          description:  topic does not exist
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - subscriptions
      summary: deletes a subscription by its id
      operationId: subscription_manager.endpoints.subscriptions.delete_subscription
      parameters:
        - in: path
          name: subscription_id
          description: the id of the requested subscription
          schema:
            type: integer
      responses:
        '204':
          description: subscription deleted successfully
        '404':
          description:  subscription does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/:
    get:
      tags:
        - users
      summary: retrieves all available users
      operationId: subscription_manager.endpoints.users.get_users
      responses:
        '200':
          description: lists all available users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - users
      summary: creates a new user
      operationId: subscription_manager.endpoints.users.post_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
        description: user data to add
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    get:
      tags:
        - users
      summary: retrieves a user by its id
      operationId: subscription_manager.endpoints.users.get_user
      parameters:
        - in: path
          name: user_id
          description: the id of the requested user
          schema:
            type: integer
      responses:
        '200':
          description: the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description:  user does not exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - users
      summary: updates an existing user
      operationId: subscription_manager.endpoints.users.put_user
      parameters:
        - in: path
          name: user_id
          description: the id of the user to be updated
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
      responses:
        '200':
          description: the requested user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description:  user does not exist
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists or a general DB conflict
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: subscription_manager.auth.basic_auth

  schemas:
    TopicName:
      description: the name of the topic
      type: string
      example: 'Airport arrivals'
    QOS:
      description: Quality of Service value to be passed to the broker
      type: string
      enum: [
        'AT_LEAST_ONCE',
        'AT_MOST_ONCE',
        'EXACTLY_ONCE'
      ]
      example: 'EXACTLY_ONCE'
    TopicPost:
      description: the data to be sent in order to create a new topic
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/TopicName'
    TopicPut:
      description: the data to be sent in order to update an existing topic
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TopicName'
    Topic:
      description: the topic data returned back from the server
      allOf:
        - $ref: '#/components/schemas/TopicPost'
        - type: object
          properties:
            id:
              type: number
              example: 1
    SubscriptionPost:
      description: the data to be sent in order to create a new subscription
      type: object
      required:
        - topics
      properties:
        topics:
          type: array
          items:
            $ref: '#/components/schemas/TopicName'
          example: [
            "topic_name1", "topic_name2"
          ]
        active:
          type: boolean
          example: true
        qos:
          $ref: '#/components/schemas/QOS'
        durable:
          type: boolean
          example: true
    SubscriptionPut:
      description: the data to be sent in order to update an existing subscription
      type: object
      properties:
        topics:
          type: array
          items:
            $ref: '#/components/schemas/TopicName'
          example: [
            "topic_name1", "topic_name2"
          ]
        active:
          type: boolean
          example: true
        qos:
          $ref: '#/components/schemas/QOS'
        durable:
          type: boolean
          example: true
    Subscription:
      description: the subscription data returned back from the server
      type: object
      properties:
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
        id:
          type: number
          example: 1
        queue:
          type: string
          format: uuid
          example: ef7a1a2c219d4f52a6d8593387318e26
        active:
          type: boolean
          example: true
        qos:
          $ref: '#/components/schemas/QOS'
        durable:
          type: boolean
          example: true
    UserPost:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    UserPut:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: 'date-time'
        is_admin:
          type: boolean
    Error:
      description: Error structure (RFC 7807 compliant - https://tools.ietf.org/html/rfc7807)
      type: object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem
          example: Internal Server Error
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
          example: The server has encountered an error during the request
        status:
          type: integer
          description: The HTTP response code
          example: 500
